# 0-add_integer.txt

===========================
How to use 0-add_integer.py
===========================

This defines an integer addition function ``add_integer(a, b=98)``.

Numbers
=======

``add_function()`` returns the addition of its arguments, equivalent to
the '+' sign.

::
	>>> form 0-add_integer import add_integer
	>>> add_integer(7, 3)
	10

::

	>>> add_integer(7, -3)
	5

It also works with floating-point values.

::

	>>> add_integer(7.0, 3.0)
	10

::

	>>> add_integer(-7.0, 3.0)
	-5

::

	>>> add_integer(7.0, 3)
	10

The second argument is optional, because it is equal to 98

::

	>>> add_integer(2)
	100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And also with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

