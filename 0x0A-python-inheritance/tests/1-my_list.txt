# 1-my_list.txt

=======================
How to use 1-my_list.py
=======================

This is a module defines a class ``MyList`` that inherits form ``list``

Instantiation
=============

``MyList`` is an inherited ``list`` class, and thus features the same methods.

::

	>>> MyList = __import__('1-my_list').MyList
	>>> my_list = MyList()
	>>> type(my_list)
	<class '1-my_list.MyList'>

::

	>>> print(my_list)
	[]

::

	>>> my_list = MyList([1, 2, 3, 4])
	>>> print(my_list)
	[1, 2, 3, 4]

The inherited list have list properites

::

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]

::

	>>> my_list = MyList(None)
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

::

	>>> my_list = MyList([1, 3], [2, 4], [5])
	Traceback (most recent call last):
	TypeError: list expected at most 1 argument, got 3

The method ``print_sorted``
===========================

``prints_sorted`` is ``MyList`` method that print the sorted list of the inherited list

::

	>>> my_list = MyList()
	>>> print(my_list.print_sorted)
	<bound method MyList.print_sorted of []>

::

	>>> my_list = MyList([4, 2, 5, 3, 1])
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

::

	>>> print(my_list)
	[4, 2, 5, 3, 1]

Error will be raised if two types are given in the list

::

	>>> my_list = MyList(['Holberton', 'Brennan', 'Betty', 'School', 'Poppy'])
	>>> print(my_list)
   	['Holberton', 'Brennan', 'Betty', 'School', 'Poppy']
	
::

	>>> my_list.print_sorted()
	['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']

::
	
	>>> my_list = MyList(['Holberton', 3, 4, 6])
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: '<' not supported between instances of 'int' and 'str'
